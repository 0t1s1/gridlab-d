#!/bin/bash
#
# Run this script to create a new module
#

VARLIST=MAJOR MINOR MODULENAME
MAJOR=3
MINOR=0

echo "WARNING: this script does not work for V$MAJOR.$MINOR"

# confirm [VARNAME [DEFAULT]]
function confirm() (
	while [ true ]; do
		echo ""
		if [ -z "$2" ]; then
			read -p "$1? "
		else
			read -p "$1? [$2] "
		fi
		if [ -z "$REPLY" -a ! -z "$2" ]; then
			REPLY="$2"
		fi
		case "$REPLY" in
		( Y | YES | y | yes ) exit 0;;
		( N | NO | n | no ) exit 1;;
		esac
		echo "ERROR: you must answer with yes or no."
	done
)

# getguid [VARNAME]
function getguid() {
	if [ -z "$1" ]; then
		REPLY=$(uuidgen)
	else
		eval "$1=$(uuidgen)"
	fi
}

# getstring PROMPT PATTERN [VARNAME [DEFAULT [CALL]]]
function getstring() {
	unset REPLY
	while [ -z "$REPLY" ]; do
		echo ""
		if [ -z "$4" ]; then
			read -p "$1: "
		else
			read -p "$1: [$4] "
		fi
		if [ -z "$REPLY" -a ! -z "$4" ]; then
			REPLY="$4"
		fi
		CHECK=$(echo $REPLY|sed -e 's/['"$2"']//g')
		if [ ! -z "$CHECK" ]; then
			echo "ERROR: module name must use [$2] characters only"
			unset REPLY
		fi
		if [ ! -z "$5" ]; then
			if ( ! eval $5 $REPLY ); then
				unset REPLY
			fi
		fi
	done
	unset CHECK
	if [ ! -z "$3" ]; then
		eval "$3='$REPLY'"
	fi
}

function checkpath () (
	if [ -d $* ]; then
		echo "ERROR: $* exists"
		exit 1
	else
		exit 0
	fi
)

OK=no
while [ "$OK" != "yes" ]; do 
	getstring 'Repository' '-a-zA-Z0-9:_./' SVN ${SVN:-https://gridlab-d.svn.sourceforge.net/svnroot/gridlab-d}
	getstring 'Working path' '-a-z_ 0-9A-Z/' WORKDIR $(pwd)
	getstring 'Ticket number' '0-9' TICKETID $TICKETID
	getstring 'Module name' 'a-z' MODULENAME $MODULENAME '' checkpath
	getstring 'Globals (space separated)' 'a-zA-Z0-9_ ' GLOBALS "$GLOBALS"
	getstring 'Classes (space separated)' 'a-z_ ' CLASSES "$CLASSES"

	echo ""
	echo "Summary of inputs"
	echo "================="
	echo "  Repository........ $SVN"
	echo "  Working path...... $WORKDIR"
	echo "  Ticket number..... $TICKETID"
	echo "  Module name....... $MODULENAME"
	echo "  Globals........... $GLOBALS"
	echo "  Classes........... $CLASSES"
	
	if confirm 'Ok' Y; then
		OK=yes
	fi

	echo "Creating module $MODULENAME..."
	mkdir $MODULENAME
	for FILE in $(ls $0.d); do
		cp $0.d/$FILE /tmp/$$
		for VAR in $VARLIST; do
			VAL=$(eval \$$VAR)
			cat /tmp/$$ | sed -E 's/%'$VAR'%/'$VAL'/g' >/tmp/$$.$VAR
			mv /tmp/$$.VAR /tmp/$$
		done
		echo "Creating $MODULENAME/$FILE..."
		mv /tmp/$$ $MODULENAME/$FILE
	done
	echo "Done"
done

